<script>
    const socket = io();
         let timer;
    socket.on('disconnect', (reason) => {
      //refresh browser if server socket disconnects
     if(reason === 'transport close'){
      timer = setTimeout(()=>{
      alert('underlying connection lost please reload')
      },4000)
     } 
    });
socket.on('connect', (error) => {
  clearTimeout(timer)
});
      socket.on('chatMsg',(data)=>{
        const msgWindow = $('.chats');
        $('#typingIndicator').remove()
        msgWindow.append( `
        <span class="u1 chat">${data.message}
          <div class="time">${data.time}</div>
          </span>`)
          chatWindow.scrollTop = chatWindow.scrollHeight
        socket.emit('received',null);
      
      })
      socket.on('offline',(data)=>{
      $('#status').text(data.status)
      })
      socket.on('active',(data)=>{
      $('#status').text(data.status)
      })
      const btn = document.querySelector('button[type="submit"]');
      btn.addEventListener('click',(e)=>{
        //get necessary data
        const message = document.querySelector('#msg').value;
        const cid = document.querySelector('#friendId').value;
        const token = document.querySelector('input[name="_csrf"]').value;
        const msgWindow = $('.chats');
        msgWindow.scrollTop = msgWindow.scrollHeight
        const input = document.querySelector('textarea')
        if(!input.value || input.value == " ") {
          return }
          //add time stamp
        const time = moment().format('LT');
        //append message to sender window
        msgWindow.append(`
        <span class="u2 chat">${message}
                <div class="time">
                  ${time} &nbsp; 
                  <div class="time"><i class="material-icons">done</i></div> 
                </div>
              </span>
      `);
      input.value =''
        /*socket.emit('chat',{message:message,fid:cid,time:time},()=>{
        });*/
        //use fetch api to send message
        fetch('/chatme',{
          method:'POST',
          headers:{
            "csrf-token":token,
            "Content-Type":'application/json'
          },
          body:JSON.stringify({
            receiver: cid,
            message:message,
            time: time,
          })
        })
        .then(res=>res.json())
        .then(res=>{
          if(res.code!==200){
            return
          }
          const spans = $('.u2.chat');
        spans[spans.length - 1].childNodes[1].childNodes[1].childNodes[0].textContent = 'done_all'
        })
        chatWindow.scrollTop = chatWindow.scrollHeight
      })
     const emojiBtn = $('.openEmoji');
     emojiBtn.on('click',()=>{
       $('.emoticons').css('display','block')
       chatWindow.scrollTop = chatWindow.scrollHeight
     })
     $('#msg').on('focus',()=>{
       $('.emoticons').css('display','none')
     })
     //typing indicator
     const fid = $('#friendId').val()
     $('textarea').focus(()=>{
       socket.emit('typing',fid)
     })
     $('textarea').blur(()=>{
       socket.emit('stopTyping',fid)
     })
     socket.on('isTyping',()=>{
       const typingIndicator = document.querySelector('#typingIndicator')
       console.log(typingIndicator)
       if(!typingIndicator){
        $('.chats').append( `             
            <span class="u1 chat" id="typingIndicator">typing..
                </span>`)
       }
       $('#status').css('display','none')
       $('#typing').css('display','block')
     })    
      socket.on('stoppedTyping',()=>{
       $('#typingIndicator').remove()
       $('#status').css('display','block')
       $('#typing').css('display','none')
     })
    </script>