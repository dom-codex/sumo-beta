<script>
  //script for side nav
  document.addEventListener("DOMContentLoaded", function () {
    const ele = document.querySelectorAll(".sidenav");
    const sidenav = M.Sidenav.init(ele);
    const elems = document.querySelectorAll(".dropdown-trigger");
    const dropdown = M.Dropdown.init(elems);
    const instance = M.Sidenav.getInstance($(".sidenav"));
    instance.open();
  });
  const feedList = document.querySelector(".feeds");
  feedList.scrollTop = feedList.scrollHeight;

  const socket = io();
  let timer;
  socket.on("disconnect", (reason) => {
    //refresh browser if server socket disconnects
    if (reason === "transport close") {
      timer = setTimeout(() => {
        alert("underlying connection lost please reload");
      }, 4000);
    }
  });
  socket.on("connect", (error) => {
    clearTimeout(timer);
  });
  //event for status
  socket.on("offline", (data) => {
    const cids = $("body .sidenav").find(".chatids");
    for (let i = 0; i < cids.length; i++) {
      let cid = cids[i];
      if (cid.value.toString() === data.chat.toString()) {
        const indicator = cid.parentNode.children[2]
       /* const indicator2 =
          cid.parentNode.parentNode.childNodes[1].childNodes[3].childNodes[1]
            .childNodes[3];*/
        indicator.style.backgroundColor = "grey";
      //  indicator2.style.backgroundColor = "grey";
      }
    }
  });

  socket.on("active", (data) => {
    const cids = $("body .sidenav").find(".chatids");
    for (let i = 0; i < cids.length; i++) {
      let cid = cids[i];
      if (cid.value.toString() === data.chat.toString()) {
        const indicator = cid.parentNode.children[2]
        /*const indicator2 =
          cid.parentNode.parentNode.childNodes[1].childNodes[3].childNodes[1]
            .childNodes[3];*/
        indicator.style.backgroundColor = "rebeccapurple";
       // indicator2.style.backgroundColor = "rebeccapurple";
      }
    }
  });
  //detector for  large screen
  socket.on("offline", (data) => {
    const cids = $(".window").find(".chatids");
    for (let i = 0; i < cids.length; i++) {
      let cid = cids[i];
      if (cid.value.toString() === data.chat.toString()) {
        const indicator = cid.parentNode.children[2]

        /*const indicator2 =
          cid.parentNode.parentNode.childNodes[1].childNodes[3].childNodes[1]
            .childNodes[3];*/
        indicator.style.backgroundColor = "grey";
       // indicator2.style.backgroundColor = "grey";
      }
    }
  });

  socket.on("active", (data) => {
    const cids = $(".window").find(".chatids");
    for (let i = 0; i < cids.length; i++) {
      let cid = cids[i];
      if (cid.value.toString() === data.chat.toString()) {
        const indicator = cid.parentNode.children[2]
       /* const indicator2 =
          cid.parentNode.parentNode.childNodes[1].childNodes[3].childNodes[1]
            .childNodes[3];*/
        indicator.style.backgroundColor = "rebeccapurple";
       // indicator2.style.backgroundColor = "rebeccapurple";
      }
    }
  });
  //end of event for status
  socket.on("connect", (socketio) => {
    const uid = document.querySelector("#uid");
    socket.emit("identify", uid.value);
  });

  socket.on("notification", (data) => {
    $(".feeds").append(` 
     <div class="feedcard Cards">
        <div><p>Message:</p></div>
        <div class="cardb">
        <p>${data.message}</p>
        </div>
        <div class="cardf"><small>${data.length}</small> <i>sent: ${data.time}</i></div>
      </div> `);
      $('.notfound.feed').css('display','none')
    feedWindow.scrollTop = feedWindow.scrollHeight;
    $(".newfeedwindow").css("display", "none");
  });
  // tell others you are online
  //const id = document.querySelector('#uid').value;
  socket.on("denied", (data) => {
    $(".errdisplay").text(data.message);
    $(".errdisplay").css("display", "inline");
    $("#largeErr").text(data.message);
    $("#largeErr").css("display", "inline");
    setTimeout(() => {
      $(".errdisplay").css("display", "none");
      $("#largeErr").css("display", "none");
    }, 2600);
  });
  //listener for added chat
  socket.on("online", (data) => {
    const chatTiles = document.querySelector('.userChats').children
    if (chatTiles.length >= 10) {
      document.querySelector('.userChats').removeChild(chatTiles[chatTiles.length - 1])
    }
    //to notify other connected sockets
    const uid = document.querySelector("#uid").value;
    const inputs = $(".chatids");
    const chatsids = [];
    for (let i = 0; i < inputs.length; i++) {
      chatsids.push(inputs[i].value);
    }
    const isRendered = chatsids.some((id) => id === data.fid);
    if (!isRendered || uid == data.fid) {
      $('.notfound.chat').remove();
      $(".errdisplay").css("display", "none");
    $("#largeErr").css("display", "none");
      $(".userChats").prepend(` 
      <li class="collection-item avatar Cards" style="background-color:${data.isNew ? 'white' : '' }">
    <input class="chatids" type="hidden" value="${data.fid}"/>
    <img src="${data.img}" alt="" class="circle">
    <div class="indicator" style="background-color:${ data.status === 'online' ||data.anStatus === 'online'  ? 'rebeccapurple' : 'grey' }"></div>
    <div>
    <span class="title"> 
     <a href="/chat/${data.fid}" >
      ${data.name.split(' ')[0]}</a>

    </span>
    <p>
    <small class="brief">
      say hi to ${data.name.split(' ')[0]}</small>
    </p></div>
    <div class=" secondary-content">
        <small>
        </small>
    </div>
  </li>
 `);
      $(".newchatwindow").css("display", "none");
    } else if (isRendered) {
      const cids = $(".userChats").find(".chatids");
      for (let i = 0; i < cids.length; i++) {
        if (cids[i].value.toString() === data.fid.toString()) {
          const small = cids[i].parentNode.childNodes[5];
          const messageIdicator = cids[i].parentNode.children[1].children[1]//cid.parentNode.childNodes[3].childNodes[3].childNodes[0];
          cids[i].parentNode.children[1].children[0].children[0].style.backgroundColor = 'rebeccapurple'//cid.parentNode.childNodes[3].childNodes[3].childNodes[0];
          cids[i].parentNode.children[1].children[0].children[0].style.display = 'block'//cid.parentNode.childNodes[3].childNodes[3].childNodes[0];
        }
      }
    }
  });

  socket.on("activeUsers", (data) => {
    //for emitting socket
    const uid = document.querySelector("#uid");
    data.forEach((user) => {
      if (user._id == uid.value) {
        return;
      }
      $(".userChats").append(`  
      
      <li class="collection-item avatar Cards" style="background-color:${ user.isNew ? 'white' : '' }">
    <input class="chatids" type="hidden" value="${user._id}"/>
    <img src="${user.img}" alt="" class="circle">
    <div class="indicator" style="background-color:${ user.status === 'online' || user.anStatus === 'online'  ? 'rebeccapurple' : 'grey'}"></div>
    <div>
    <span class="title">    <a href="/chat/${user._id}" >
        ${user.name.split(' ')[0]} </a>

    </span>
    <p>
    <small class="brief">
      say hi to ${user.name.split(' ')[0]}
      </small>
    </p></div>
    <div class=" secondary-content">
        <small>
        </small>
    </div>
  </li>
  `);
      $(".newchatwindow").css("display", "none");
    });
  });
  //gets start chat button
  const joinHandler = (fieldtoselect) => {
    //obtain the inputed chat string
    const chatString = $(fieldtoselect).val();
    const token = $('input[name="_csrf"]').val();
    if (!chatString || chatString === "") {
      $(".errdisplay").text("field cannot be empty").css("display", "block");
      $("#largeErr").text("field cannot be empty").css("display", "block");
      return;
    }
    $(".spinner-cont").css("display", "flex");
    fetch("/addchat", {
      method: "POST",
      headers: {
        "csrf-token": token,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chatString: chatString,
      }),
    })
      .then((res) => res.json())
      .then((res) => {
        $(".spinner-cont").css("display", "none");
        if (res.code === 400) {
          $(".errdisplay").text(res.message).css("display", "block");
          $("#largeErr").text(res.message).css("display", "block");
        } else if (res.code === 200) {
          $(fieldtoselect).val("");
          $(".errdisplay").text(res.message).css("display", "block").css('color','indigo');
          $("#largeErr").text(res.message).css("display", "block").css('color','indigo');
         // $(".new").css("display", "none");
        }
      });
  };
  const chatBtn = $("#startchat");
  const largeChatBtn = $("#startchatlarge");
  chatBtn.on("click", () => joinHandler("#chatString"));
  largeChatBtn.on("click", () => joinHandler("#chatStringLarge"));

  socket.on("disconnect", () => {
    socket.disconnect(true);
    socket.removeAllListeners("connect");
  });
  socket.on("notify", (data) => {
    //data should contain the last message in the list
    //data should also contain the no of new messages
    const cids = $("#userChatsSmall").find(".chatids");
    for (let i = 0; i < cids.length; i++) {
      let cid = cids[i];
      if (cid.value.toString() === data.id.toString()) {
        const time = cid.parentNode.children[4].children[0];
        const messageIdicator = cid.parentNode.children[3].children[1].children[0]//cid.parentNode.childNodes[3].childNodes[3].childNodes[0];
        messageIdicator.textContent = ""; 
        data.withImage?messageIdicator.innerHTML =`<span class="withImage" style="display:flex;align-items:center;"><i class="material-icons thumbnail">insert_photos</i>${messageIdicator.textContent = data.msg.length > 25 ? data.msg.substring(0, 12) + '...' : data.msg}</span>` : messageIdicator.textContent = data.msg.length > 25 ? data.msg.substring(0, 25) + '...' : data.msg;
        time.textContent = " ";
        time.textContent = data.time;
        //move the notification to the top
        const parent = $("#userChatsSmall");
        //add to the top  of the list
        cid.parentNode.style.backgroundColor = "#fff";
        const content = cid.parentNode;
        cid.parentNode.remove();
        parent.prepend(content); 
        break
      } else {
        continue;
      }
    }
    //for large chat window
    const ids = $("#userChatsLarge").find(".chatids");
    for (let i = 0; i < ids.length; i++) {
      let cid = ids[i];
      if (cid.value.toString() === data.id.toString()) {
        const time = cid.parentNode.children[4].children[0];
        const messageIdicator = cid.parentNode.children[3].children[1].children[0]//cid.parentNode.childNodes[3].childNodes[3].childNodes[0];
        messageIdicator.textContent = "";
        messageIdicator.innerHTML = "";
        data.withImage?messageIdicator.innerHTML =`<span class="withImage" style="display:flex;align-items:center;"><i class="material-icons thumbnail">insert_photos</i>${messageIdicator.textContent = data.msg.length > 25 ? data.msg.substring(0, 12) + '...' : data.msg}</span>` : messageIdicator.textContent = data.msg.length > 25 ? data.msg.substring(0, 25) + '...' : data.msg;
        //messageIdicator.textContent = data.msg.length > 25 ? data.msg.substring(0, 25) + '...' : data.msg;
        time.textContent = " ";
        time.textContent = data.time;
        //move the notification to the top
        const parent = $("#userChatsLarge");
        //add to the top  of the list
        cid.parentNode.parentNode.style.backgroundColor = "#fff";
        const content = cid.parentNode;
        cid.parentNode.remove();
        parent.prepend(content);
        return
      } else {
        continue;
      }
    }
    $("#userChatsSmall").prepend(`    
    <li class="collection-item avatar Cards" style=" background-color:${ data.isNew ? 'white' : '' }">
    <input class="chatids" type="hidden"  value="${data.id}"/>
    <img src="${data.img}" alt="" class="circle">
    <div class="indicator" style="background-color:${ data.status === 'online' || data.anStatus === 'online'  ? 'rebeccapurple' : 'grey'}"></div>
    <div>
    <span class="title">   
       <a href="/chat/${data.id}" >
        ${data.name.split(' ')[0]} </a>

    </span>
    <p>
    <small class="brief">
      ${data.withImage ?
        `<span class="withImage" style="display:flex;
        align-items:center;">
          <i class="material-icons thumbnail">insert_photos</i>
          ${data.msg.length > 25 ? 
            data.msg.substring(0, 15) + '...' : data.msg}
            </span>` : data.msg.length > 24 ? 
        data.msg.substring(0,25)+' ...': data.msg}
      </small>
    </p></div>
    <div class=" secondary-content">
        <small>
            ${data.time}
        </small>
    </div>
  </li>
 `);
    $("#userChatsLarge").prepend(`            
    <li class="collection-item avatar Cards" style="background-color:${ user.isNew ? 'white' : '' }">
    <input class="chatids" type="hidden"  value="${data.id}"/>
    <img src="${data.img}" alt="" class="circle" height="50px" width="50px">
    <div class="indicator" style="background-color:${data.status === 'online' || data.anStatus === 'online'  ? 'rebeccapurple' : 'grey' }"></div>
    <div>
    <span class="title">   
       <a href="/chat/${data.id}" >
        ${data.name.split(' ')[0]} </a>

    </span>
    <p>
    <small class="brief">
      ${data.withImage ?
        `<span class="withImage" style="display:flex;
        align-items:center;">
          <i class="material-icons thumbnail">insert_photos</i>
          ${data.msg.length > 25 ? 
            data.msg.substring(0, 15) + '...' : data.msg}
            </span>` : data.msg.length > 24 ? 
        data.msg.substring(0,25)+' ...': data.msg}
      </small>
    </p></div>
    <div class=" secondary-content">
        <small>
            ${data.time}
        </small>
    </div>
  </li> `);
  });
  $('.inform span').on('click', () => {
    $('.inform').css('display', 'none')
  })
  //script for requests
  const chatsBtn = $('.controls button:nth-child(1)')
  const requestBtn = $('.controls button:nth-child(2)')
  const searchBtn = $('.controls button:nth-child(3)')
  requestBtn.on('click', () => {
    $(".errdisplay").css("display", "none");
    $("#largeErr").css("display", "none");
    $('.chats').removeClass('current')
    $('.search').removeClass('current')
    $('.addById').removeClass('current')
    $('.searchcontrols').removeClass('current')
    $('.requests').addClass('current')
    requestBtn.css('display', 'none')
    chatsBtn.css('display', 'inline-block');
    $('.searchResult').html('');
    $('.searchResult.large').html('');
  })
  chatsBtn.on('click', () => {
    $(".errdisplay").css("display", "none");
    $("#largeErr").css("display", "none");
    $('.requests').removeClass('current')
    $('.search').removeClass('current')
    $('.addById').removeClass('current')
    $('.searchcontrols').removeClass('current')
    $('.chats').addClass('current')
    requestBtn.css('display', 'inline-block')
    chatsBtn.css('display', 'none')
    $('.searchResult').html('');
    $('.searchResult.large').html('');
  })
  searchBtn.on('click', () => {
    $(".errdisplay").css("display", "none");
    $("#largeErr").css("display", "none");
    const currentText = searchBtn.text().substring(0, 6)
    if(currentText === 'Search'){
      $('.search').addClass('current')
      $('.searchcontrols').addClass('current')
      $('.chats').removeClass('current')
      $('.addById').removeClass('current')
      $('.searchResult').html('');
      $('.searchResult.large').html('');
      $('.searchResult').append(`
            <div class="search-vector">
              <i class="material-icons">search</i>
              <br>
              <p>Enter a name in the form above</p>
            </div>
          `)    
    
    }else {
      $('.chats').addClass('current')
      $('.search').removeClass('current')
      $('.addById').addClass('current')
      $('.searchcontrols').removeClass('current')
      $('.searchResult').html('');
      $('.searchResult.large').html('');
    }
    $('.requests').removeClass('current')
    searchBtn.text(`${currentText === 'Search' ? 'Add Chat' : 'Search'}`)
  })
  //new request event
  socket.on("new", (data) => {
    const badge = $('.controls button:nth-child(2) span')
    badge.text(data.requests)
    $('.notfound.req').remove()
    $('.palsRequest').prepend(`
    <li class="collection-item avatar Cards">
      <input class="rid" type="hidden" value="${data.fid}"/>
    <img src="${data.img}" alt="" class="circle" height="50px" width="50px">
    <div>
    <span class="title">   
        ${data.name.split(' ')[0]}
    </span>
    <p>
    <small class="brief">
      ${data.desc}
            </small>
    </p></div>
    <div class=" secondary-content">
  <button id="decline" onclick="chatRequestHandler('${data.fid}','decline')">decline</button>
  <button id="grant" onclick="chatRequestHandler('${data.fid}','grant')">accept</button>
    </div>
  </li>
 `)
  });
</script>